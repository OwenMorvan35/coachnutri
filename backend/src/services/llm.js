import fetch from 'node-fetch';
import { logError } from '../logger.js';

const formatProfileContext = (profile = {}) => {
  const details = [];
  if (profile.objective) {
    details.push(`Objectif: ${profile.objective}`);
  }
  if (typeof profile.age === 'number') {
    details.push(`Age: ${profile.age} ans`);
  }
  if (typeof profile.heightCm === 'number') {
    details.push(`Taille: ${profile.heightCm} cm`);
  }
  if (typeof profile.weightKg === 'number') {
    details.push(`Poids: ${profile.weightKg} kg`);
  }
  if (Array.isArray(profile.prefs) && profile.prefs.length > 0) {
    details.push(`PrÃ©fÃ©rences: ${profile.prefs.join(', ')}`);
  }

  return details.length > 0 ? `Profil client: ${details.join(' | ')}.` : 'Profil client: non renseignÃ©.';
};

export const buildSystemPrompt = (profile) => {
  return [
    'Tu es CoachNutri, coach nutrition bienveillant francophone.',
    'Appuie-toi sur les repÃ¨res OMS/ANSES et vulgarise sans culpabiliser.',
    'RÃ©ponds en 3 blocs distincts :',
    'âš¡ Diagnostic : synthÃ¨se courte en une phrase.',
    'âœ… 3 actions : liste numÃ©rotÃ©e de trois actions concrÃ¨tes.',
    'ðŸ’¡ Tip : une astuce bonus pratique.',
    formatProfileContext(profile),
  ].join('\n');
};

const normalizeHistory = (history = []) => {
  if (!Array.isArray(history)) {
    return [];
  }

  return history
    .filter((item) => item && typeof item.content === 'string' && item.content.trim().length > 0)
    .map((item) => {
      const content = item.content.trim();
      switch (item.role) {
        case 'coach':
          return { role: 'assistant', content };
        case 'user':
          return { role: 'user', content };
        case 'system':
        case 'assistant':
          return { role: item.role, content };
        default:
          return { role: 'user', content };
      }
    });
};

const buildMessages = ({ message, history = [], profile }) => {
  const systemContent = buildSystemPrompt(profile);
  const normalizedHistory = normalizeHistory(history);
  return [
    { role: 'system', content: systemContent },
    ...normalizedHistory,
    { role: 'user', content: message },
  ];
};

export const callOpenAI = async ({ message, history, profile, model, apiKey }) => {
  if (!apiKey) {
    throw new Error('OpenAI API key is required');
  }

  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), 25_000);

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model,
        messages: buildMessages({ message, history, profile }),
      }),
      signal: controller.signal,
    });

    clearTimeout(timeout);

    if (!response.ok) {
      const errorBody = await response.text();
      const err = new Error(`OpenAI API error (${response.status})`);
      err.status = response.status;
      err.details = errorBody;
      throw err;
    }

    const payload = await response.json();
    const choice = payload.choices?.[0];
    const reply = choice?.message?.content?.trim();

    if (!reply) {
      throw new Error('RÃ©ponse OpenAI invalide : contenu vide');
    }

    return {
      reply,
      model: payload.model || model,
      tokens: payload.usage?.total_tokens ?? null,
      from: 'openai',
    };
  } catch (error) {
    if (error.name === 'AbortError') {
      const timeoutErr = new Error('OpenAI API timeout aprÃ¨s 25s');
      timeoutErr.code = 'openai_timeout';
      throw timeoutErr;
    }
    logError('callOpenAI', 'Erreur lors de la requÃªte OpenAI', error);
    throw error;
  } finally {
    clearTimeout(timeout);
  }
};

const buildMockContent = ({ message, profile }) => {
  const lower = message.toLowerCase();
  const objective = profile?.objective || 'Ã©quilibre alimentaire';
  const prefs = Array.isArray(profile?.prefs) && profile.prefs.length > 0 ? ` en respectant tes prÃ©fÃ©rences (${profile.prefs.join(', ')})` : '';

  if (lower.includes('/repas')) {
    return {
      diagnostic: "Plan repas demandÃ© : on mise sur un apport Ã©quilibrÃ© dans la journÃ©e.",
      actions: [
        'Petit-dÃ©jeuner : yaourt nature + flocons d\'avoine + fruit frais',
        'DÃ©jeuner : bol de quinoa, lÃ©gumes rÃ´tis, lÃ©gumineuses et filet de citron',
        'DÃ®ner : soupe de lÃ©gumes + tartine de pain complet avec protÃ©ine maigre',
      ],
      tip: 'PrÃ©pare les lÃ©gumes Ã  l\'avance pour gagner du temps sur la semaine.',
    };
  }

  if (lower.includes('/courses')) {
    return {
      diagnostic: "Liste de courses simple pour rester alignÃ©(e) avec ton objectif.",
      actions: [
        'Fruits & lÃ©gumes de saison (au moins 5 variÃ©tÃ©s)',
        'ProtÃ©ines maigres (poisson, tofu, lÃ©gumineuses) + cÃ©rÃ©ales complÃ¨tes',
        'OlÃ©agineux nature et huiles riches en omÃ©ga-3',
      ],
      tip: 'Fais les courses aprÃ¨s avoir mangÃ© pour Ã©viter les achats impulsifs.',
    };
  }

  if (lower.includes('/astuce')) {
    return {
      diagnostic: "Tu veux une astuce rapide pour mieux t\'organiser.",
      actions: [
        'Fixe un crÃ©neau meal prep court 2 fois par semaine',
        'Garde une base de lÃ©gumes crus prÃªts Ã  consommer',
        'PrÃ©pare une gourde d\'eau aromatisÃ©e dÃ¨s le matin',
      ],
      tip: 'Utilise un rappel sur ton tÃ©lÃ©phone pour boire toutes les 2 heures.',
    };
  }

  return {
    diagnostic: `On vise ${objective}${prefs} : garde un rythme rÃ©gulier et hydrate-toi bien.`,
    actions: [
      'Structure tes repas autour de lÃ©gumes, protÃ©ines maigres et fÃ©culents complets',
      'Bouge au moins 30 minutes aujourd\'hui pour soutenir ton mÃ©tabolisme',
      'Planifie ton prochain repas en avance pour Ã©viter les grignotages',
    ],
    tip: 'Ajoute une portion de lÃ©gumes ou fruits supplÃ©mentaires dans ton prochain repas.',
  };
};

export const mockReply = async ({ message, profile }) => {
  const start = Date.now();
  const content = buildMockContent({ message, profile });

  await new Promise((resolve) => setTimeout(resolve, 500));

  return {
    reply: [
      `âš¡ Diagnostic : ${content.diagnostic}`,
      `\nâœ… 3 actions :\n1. ${content.actions[0]}\n2. ${content.actions[1]}\n3. ${content.actions[2]}`,
      `\nðŸ’¡ Tip : ${content.tip}`,
    ].join('\n'),
    model: 'mock-coachnutri',
    tokens: null,
    from: 'mock',
    duration: Date.now() - start,
  };
};
